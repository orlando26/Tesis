# Clase modelo para una red neuronal
import numpy as np

x = np.array((
[0.00092573856541212386, 3.3774962588881529e-09, 3.3518982081040683e-05, 2.6448343932568239e-12],
[0.0033904323351435736, 3.0913016167065343e-08, 0.00016451893970717815, 3.5594663325104438e-11],
[0.010867155345477395, 2.4761785345540026e-07, 0.00070669993532260006, 4.1924256001512543e-10],
[0.030483914748062328, 1.7358675995622468e-06, 0.0026567352024509218, 4.3215536416658325e-09],
[0.074837568824627124, 1.0649894574421004e-05, 0.008740888052956447, 3.8985985866388233e-08],
[0.16079134638610626, 5.7183151846074476e-05, 0.025168475772317615, 3.0780183386954186e-07],
[0.30234287751064998, 0.00026871068688414247, 0.063423811983364331, 2.1268063782796401e-06],
[0.49754329904071454, 0.0011050854425918221, 0.13987555930040246, 1.2861119521432859e-05],
[0.71656582227200227, 0.0039774144378330054, 0.26997615027922367, 6.8064970948780419e-05],
[0.90318219508641751, 0.012528523815823511, 0.45604010128621097, 0.00031525546350463329],
[0.99629675123254269, 0.034537669473420136, 0.67417824742196819, 0.0012778964074479202],
[0.010867155345477395, 2.4761785345540026e-07, 0.00070669993532260006, 4.1924256001512543e-10],
[0.030483914748062328, 1.7358675995622406e-06, 0.0026567352024509197, 4.3215536416658325e-09],
[0.074837568824627124, 1.0649894574421004e-05, 0.008740888052956447, 3.8985985866388233e-08],
[0.16079134638610626, 5.7183151846074476e-05, 0.025168475772317615, 3.0780183386954186e-07],
[0.30234287751064992, 0.00026871068688414247, 0.063423811983364331, 2.1268063782796401e-06],
[0.49754329904071454, 0.0011050854425918221, 0.13987555930040246, 1.2861119521432859e-05],
[0.71656582227200227, 0.0039774144378330054, 0.26997615027922378, 6.8064970948780419e-05],
[0.90318219508641751, 0.012528523815823511, 0.4560401012862107, 0.00031525546350463329],
[0.99629675123254269, 0.034537669473420136, 0.67417824742196841, 0.0012778964074479202],
[0.96182515212406849, 0.083325940481620897, 0.87224905407369258, 0.0045333864862773391],
[0.074837568824627096, 1.0649894574421004e-05, 0.008740888052956447, 3.8985985866388233e-08],
[0.16079134638610626, 5.7183151846074476e-05, 0.025168475772317615, 3.0780183386954186e-07],
[0.30234287751064992, 0.00026871068688414247, 0.063423811983364331, 2.1268063782796401e-06],
[0.49754329904071443, 0.0011050854425918221, 0.13987555930040246, 1.2861119521432859e-05],
[0.71656582227200227, 0.0039774144378330054, 0.26997615027922378, 6.8064970948780419e-05],
[0.90318219508641751, 0.012528523815823511, 0.45604010128621086, 0.00031525546350463329],
[0.99629675123254269, 0.034537669473420136, 0.67417824742196819, 0.0012778964074479202],
[0.96182515212406849, 0.083325940481620897, 0.8722490540736928, 0.0045333864862773391],
[0.81263891317265757, 0.1759387444511985, 0.98764381327364781, 0.014074854410986713],
[0.30234287751065009, 0.00026871068688414247, 0.063423811983364484, 2.1268063782796401e-06],
[0.49754329904071465, 0.001105085442591826, 0.13987555930040246, 1.2861119521432859e-05],
[0.71656582227200238, 0.0039774144378330123, 0.26997615027922389, 6.8064970948780663e-05],
[0.90318219508641773, 0.012528523815823511, 0.45604010128621109, 0.00031525546350463443],
[0.99629675123254269, 0.034537669473420171, 0.67417824742196852, 0.0012778964074479223],
[0.96182515212406838, 0.083325940481621008, 0.8722490540736928, 0.0045333864862773469],
[0.81263891317265735, 0.17593874445119861, 0.98764381327364792, 0.014074854410986739],
[0.60088749842170552, 0.32511486113239885, 0.97871052144236736, 0.038243633351354507],
[0.71656582227200238, 0.0039774144378330123, 0.26997615027922389, 6.8064970948780663e-05],
[0.90318219508641762, 0.012528523815823511, 0.45604010128621109, 0.00031525546350463443],
[0.99629675123254269, 0.034537669473420171, 0.67417824742196852, 0.0012778964074479223],
[0.96182515212406838, 0.083325940481621008, 0.87224905407369291, 0.0045333864862773469],
[0.81263891317265735, 0.17593874445119861, 0.98764381327364792, 0.014074854410986739],
[0.60088749842170552, 0.32511486113239885, 0.97871052144236725, 0.038243633351354507],
[0.38885061617625161, 0.52578261751099109, 0.84879387262083072, 0.090942826847932631],
[0.99629675123254269, 0.034537669473420171, 0.67417824742196852, 0.0012778964074479223],
[0.96182515212406838, 0.083325940481621008, 0.87224905407369291, 0.0045333864862773469],
[0.81263891317265735, 0.17593874445119861, 0.98764381327364792, 0.014074854410986739],
[0.60088749842170552, 0.32511486113239885, 0.97871052144236736, 0.038243633351354507],
[0.38885061617625161, 0.52578261751099109, 0.8487938726208305, 0.090942826847932631],
[0.2202249314674857, 0.74416578041508319, 0.6442349525159301, 0.18926565949669572],
[0.81263891317265735, 0.17593874445119861, 0.98764381327364792, 0.014074854410986739],
[0.60088749842170552, 0.32511486113239885, 0.97871052144236725, 0.038243633351354507],
[0.38885061617625161, 0.52578261751099109, 0.84879387262083072, 0.090942826847932631],
[0.2202249314674857, 0.74416578041508319, 0.64423495251592988, 0.18926565949669572],
[0.10915515347786972, 0.92177990503297602, 0.42793755422859248, 0.34472220915664492],
[0.38885061617625161, 0.52578261751099109, 0.84879387262083061, 0.090942826847932631],
[0.2202249314674857, 0.74416578041508319, 0.6442349525159301, 0.18926565949669572],
[0.10915515347786972, 0.92177990503297602, 0.42793755422859225, 0.34472220915664492],
[0.047349573864849059, 0.99926078857560574, 0.24877720607220322, 0.54949124245827252],
[0.10915515347786972, 0.92177990503297602, 0.42793755422859248, 0.34472220915664492],
[0.047349573864849059, 0.99926078857560574, 0.24877720607220305, 0.54949124245827252],
[0.017975541169775906, 0.9480353349688263, 0.12657118351926727, 0.76656035609881901],
[0.017975541169775906, 0.9480353349688263, 0.12657118351926716, 0.76656035609881901],
[0.0059723045021115801, 0.78716227528142935, 0.056357687561318578, 0.93589258061709546],
[0.0017365847378096621, 0.57200271380922529, 0.021961679946345933, 0.9999993611960597],
), dtype=float)




y = np.array((
[0, 0],
[0, 0.1],
[0, 0.2],
[0, 0.3],
[0, 0.4],
[0, 0.5],
[0, 0.6],
[0, 0.7],
[0, 0.8],
[0, 0.9],
[0, 1],
[0.1, 0.1],
[0.1, 0.2],
[0.1, 0.3],
[0.1, 0.4],
[0.1, 0.5],
[0.1, 0.6],
[0.1, 0.7],
[0.1, 0.8],
[0.1, 0.9],
[0.1, 1],
[0.2, 0.2],
[0.2, 0.3],
[0.2, 0.4],
[0.2, 0.5],
[0.2, 0.6],
[0.2, 0.7],
[0.2, 0.8],
[0.2, 0.9],
[0.2, 1],
[0.3, 0.3],
[0.3, 0.4],
[0.3, 0.5],
[0.3, 0.6],
[0.3, 0.7],
[0.3, 0.8],
[0.3, 0.9],
[0.3, 1],
[0.4, 0.4],
[0.4, 0.5],
[0.4, 0.6],
[0.4, 0.7],
[0.4, 0.8],
[0.4, 0.9],
[0.4, 1],
[0.5, 0.5],
[0.5, 0.6],
[0.5, 0.7],
[0.5, 0.8],
[0.5, 0.9],
[0.5, 1],
[0.6, 0.6],
[0.6, 0.7],
[0.6, 0.8],
[0.6, 0.9],
[0.6, 1],
[0.7, 0.7],
[0.7, 0.8],
[0.7, 0.9],
[0.7, 1],
[0.8, 0.8],
[0.8, 0.9],
[0.8, 1],
[0.9, 0.9],
[0.9, 1],
[1, 1]
), dtype=float)


class NeuralNetwork(object):
    def __init__(self):
        # Se definen las neuronas de cada capa
        self.inputLayerSize = 5
        self.outputLayerSize = 2
        self.hiddenLayerSize = 9

        self.eta = 0.15

        # Se definen valores random para los pesos iniciales
        self.w1 = np.random.rand(self.inputLayerSize, self.hiddenLayerSize)
        self.w2 = np.random.rand(self.hiddenLayerSize, self.outputLayerSize)

    def normalization(self, val, min, max):
        normalized = (val - min)/((max - min) + 0.000001)
        return normalized

    def desnormalization(self, val, min, max):
        desnormalized = val*max + min*(1 - val)
        return desnormalized


    def forward(self, s):
        # Normalizacion de los valores de los sensores
        try:
            r, c = s.shape
            s = np.insert(s, c, 1, axis=1)
        except ValueError:
            c = s.size
            s = np.insert(s, c, 1, axis=0)


        # Se propagan las entradas por la red hasta las salidas
        self.z2 = np.dot(s, self.w1)
        self.a = self.sigmoid(self.z2)
        self.z3 = np.dot(self.a, self.w2)
        self.mHat = self.sigmoid(self.z3)

        return self.mHat, s

    def sigmoid(self, z):
        # Funcion de activacion sigmoid
        return 1 / (1 + np.exp(-z))

    def sigmoidPrime(self, z):
        # Derivada de la funcion sigmoid
        return np.exp(-z) / ((1 + np.exp(-z)) ** 2)

    def costFunction(self, s, m):
        # Calcular el error para los valores de los sensores y los
        # motores dados, se usan los pesos guardados en la clase.
        self.mHat, s = self.forward(s)
        e = 0.5 * sum((m - self.mHat) ** 2)
        return e

    def costFunctionPrime(self, s, m):
        # Calcula la derivada con respecto a w1 y w2
        self.mHat, s = self.forward(s)

        delta3 = np.multiply(-(m - self.mHat), self.sigmoidPrime(self.z3))
        print self.a, delta3
        djdw2 = self.multiply(-self.a.T, delta3)

        delta2 = self.multiply(delta3, self.w2.T) * self.sigmoidPrime(self.z2)
        djdw1 = self.multiply(-s.T, delta2)
        return djdw1, djdw2

    def train(self, s, m, epochs):
        r,c = s.shape
        e = 0
        for i in xrange(epochs):
            for x in xrange(0, r):
                djdw1, djdw2 = self.costFunctionPrime(s[x], m[x])
                self.w1 = self.w1 + self.eta * djdw1
                self.w2 = self.w2 + self.eta * djdw2
                e = self.costFunction(s[x], m[x])
        return e

    def multiply(self, a, b):
        try:
            aRows, aColumns = a.shape
        except ValueError:
            aRows = a.size


        try:
            bRows, bColumns = b.shape
        except ValueError:
            bRows = b.size

        c = np.zeros((aRows, bColumns), dtype=float)

        for i in xrange(0, aRows):
            for j in xrange(0, bColumns):
                for k in xrange(0, aColumns):
                    c[i,j] += a[i,k] * b[k,j]

        return c




    # funciones para interactuar con otras clases:
    def getParams(self):
        # obtiene w1 y w2 como un vector:
        params = np.concatenate((self.w1.ravel(), self.w2.ravel()))
        return params

    def setParams(self, params):
        # asigna w1 y w2
        W1_start = 0
        W1_end = self.hiddenLayerSize * self.inputLayerSize
        self.w1 = np.reshape(params[W1_start:W1_end], (self.inputLayerSize, self.hiddenLayerSize))
        W2_end = W1_end + self.hiddenLayerSize * self.outputLayerSize
        self.w2 = np.reshape(params[W1_end:W2_end], (self.hiddenLayerSize, self.outputLayerSize))

    def computeGradients(self, s, m):
        dJdw1, dJdw2 = self.costFunctionPrime(s, m)
        return np.concatenate((dJdw1.ravel(), dJdw2.ravel()))

    def computeNumericalGradient(N, s, m):
        paramsInitial = N.getParams()
        numgrad = np.zeros(paramsInitial.shape)
        perturb = np.zeros(paramsInitial.shape)
        e = 1e-4

        for p in range(len(paramsInitial)):
            # Se asigna el vector de perturbacion
            perturb[p] = e
            N.setParams(paramsInitial + perturb)
            loss2 = N.costFunction(s, m)

            N.setParams(paramsInitial - perturb)
            loss1 = N.costFunction(s, m)

            # Calculo del gradiente numerico
            numgrad[p] = (loss2 - loss1) / (2 * e)

            # se regresa el valor que cambiamos a 0:
            perturb[p] = 0

        # Regresamos los parametros a su valor original:
        N.setParams(paramsInitial)

        return numgrad